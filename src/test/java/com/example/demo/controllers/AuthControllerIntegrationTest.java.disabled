package com.example.demo.controllers;

import com.example.demo.DTOs.LoginRequest;
import com.example.demo.DTOs.RegisterRequest;
import com.example.demo.entities.User;
import com.example.demo.services.TokenBlacklist;
import com.example.demo.services.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(AuthController.class)
class AuthControllerIntegrationTest {

        @Autowired
        private MockMvc mockMvc;

        @Autowired
        private ObjectMapper objectMapper;

        @MockBean
        private UserService userService;

        @MockBean
        private TokenBlacklist tokenBlacklist;

        @Test
        void registerUser_Success() throws Exception {
                RegisterRequest request = new RegisterRequest("test@example.com", "password123", "Test User");

                // Create a mock user object to return
                User mockUser = new User();
                mockUser.setEmail("test@example.com");
                mockUser.setName("Test User");

                when(userService.register(any(RegisterRequest.class))).thenReturn(mockUser);

                mockMvc.perform(post("/auth/register")
                                .contentType(MediaType.APPLICATION_JSON)
                                .content(objectMapper.writeValueAsString(request)))
                                .andExpect(status().isOk());
        }

        @Test
        void registerUser_InvalidInput_ReturnsBadRequest() throws Exception {
                RegisterRequest invalidRequest = new RegisterRequest("", "short", "");

                mockMvc.perform(post("/auth/register")
                                .contentType(MediaType.APPLICATION_JSON)
                                .content(objectMapper.writeValueAsString(invalidRequest)))
                                .andExpect(status().isBadRequest());
        }

        @Test
        void loginUser_InvalidCredentials_ReturnsError() throws Exception {
                LoginRequest loginRequest = new LoginRequest("nonexistent@example.com", "wrongpassword");

                // Mock the service to throw exception
                when(userService.login(any(LoginRequest.class))).thenThrow(new RuntimeException("Invalid credentials"));

                mockMvc.perform(post("/auth/login")
                                .contentType(MediaType.APPLICATION_JSON)
                                .content(objectMapper.writeValueAsString(loginRequest)))
                                .andExpect(status().isBadRequest());
        }

        @Test
        void loginUser_Success() throws Exception {
                LoginRequest loginRequest = new LoginRequest("test@example.com", "password123");

                when(userService.login(any(LoginRequest.class))).thenReturn("mock-jwt-token");

                mockMvc.perform(post("/auth/login")
                                .contentType(MediaType.APPLICATION_JSON)
                                .content(objectMapper.writeValueAsString(loginRequest)))
                                .andExpect(status().isOk());
        }

        @Test
        void logout_WithValidToken_ReturnsSuccess() throws Exception {
                mockMvc.perform(post("/auth/logout")
                                .header("Authorization", "Bearer test-token"))
                                .andExpect(status().isOk());
        }
}